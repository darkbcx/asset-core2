---
title: Authentication System
description: Custom JWT-based authentication with username/password credentials
alwaysApply: true
---

# Authentication System

## Overview

AssetCore implements a custom authentication system using username/password credentials with JWT (JSON Web Token) session management. This approach provides stateless authentication while maintaining security through secure password hashing and token-based authorization.

### Key Features

- **Stateless Authentication**: JWT tokens eliminate server-side session storage
- **Secure Password Hashing**: bcrypt/argon2 for password protection
- **Token-based Authorization**: Bearer tokens for API authentication
- **Future-ready Architecture**: Designed for easy migration to OAuth providers

### Security Considerations

- JWT secret must be stored in environment variables
- Tokens include expiration for security
- Password hashing uses industry-standard algorithms
- All API endpoints require valid JWT tokens

## Backend Implementation

### Authentication Flow

#### Login Process
1. **Credential Validation**
   - Client sends username and password
   - Verify username exists in user table
   - Return error if username not found

2. **Password Verification**
   - Compare submitted password with stored hash
   - Use bcrypt/argon2 for secure comparison
   - Return error if password mismatch

3. **Token Generation**
   - Generate JWT token mimicking OAuth structure
   - Include user claims and expiration time
   - Return success response with token

#### Token Refresh Process
1. **Token Validation**
   - Client sends existing JWT token
   - Validate token signature using stored secret
   - Return error if token invalid

2. **Expiration Check**
   - Verify token hasn't expired
   - Return error if token expired

3. **Token Renewal**
   - Generate new JWT token
   - Return success response with refreshed token

#### Token Validation Process (API Middleware)
1. **Signature Verification**
   - API endpoints receive JWT token from client Authorization header
   - Validate token signature using stored secret
   - Return 401 Unauthorized if validation fails

2. **Token Decoding & Authorization**
   - If valid, decode JWT payload to extract user information
   - Verify token expiration and user permissions
   - Pass user context to protected API endpoints
   - Return 403 Forbidden if user lacks required permissions

## Frontend Implementation

### Authentication Management

#### Login Flow
1. **Credential Submission**
   - Send username and password to backend
   - Handle authentication errors gracefully
   - Display appropriate error messages

2. **Token Storage**
   - **Prefer cookies over localStorage**: Always use cookies for client-side storage instead of localStorage
   - Store JWT token in cookies (document.cookie) for better security and SSR compatibility
   - Client manages token storage and expiration
   - API routes return tokens in response body; client handles storage
   - Send token in Authorization header for authenticated requests
   - Use utility functions from `@/lib/cookies` for consistent cookie management

3. **Company Selection (Multi-Company Users)**
   - Check if user has access to multiple companies
   - If multiple companies: redirect to `/select-company` page (user selects company, stored in client-side storage)
   - If single company: store active company ID in client-side storage automatically
   - If system admin: proceed to admin dashboard (no company selection)

#### Token Refresh Flow
1. **Automatic Refresh**
   - Send stored JWT token to refresh endpoint
   - Handle refresh errors appropriately
   - Update stored token on successful refresh

2. **Error Handling**
   - Redirect to login on refresh failure
   - Clear invalid tokens from storage

#### Company Selection Flow (Multi-Company Users)
1. **Access Company Selection**
   - User arrives at `/select-company` page after login
   - Display list of user's accessible companies
   - Show company name, role, and primary status

2. **Company Selection**
   - User selects a company from the list
   - Store selected company ID in cookies (never use localStorage)
   - Use `setActiveCompanyCookie()` from `@/lib/cookies` utility
   - Client manages active company state
   - Send company ID in request headers or body when needed

3. **Redirect to Dashboard**
   - After selection, redirect to `/dashboard`
   - Use active company for all data operations
   - Display company context in UI

#### Logout Process
1. **Token Cleanup**
   - Remove JWT token from cookies using cookie utility functions
   - Remove active company ID from cookies using `removeActiveCompanyCookie()` from `@/lib/cookies`
   - Call logout API endpoint (optional - for server-side cleanup)
   - Redirect to login page

### Security Best Practices

- **Always use cookies over localStorage**: Prefer cookies for better security and SSR compatibility
- Store tokens securely in cookies using `document.cookie` or cookie utility functions
- Use cookie utility functions from `@/lib/cookies` for consistent cookie management
- Send tokens in Authorization header for API requests
- Implement automatic token refresh
- Handle token expiration gracefully
- Clear tokens on logout using cookie removal functions
- Validate tokens on every API request
- Never expose tokens in URLs or client-side code comments
- **Never use localStorage**: Avoid localStorage for sensitive data like tokens and active company IDs


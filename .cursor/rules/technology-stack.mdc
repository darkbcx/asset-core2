---
title: AssetCore Technology Stack
description: Comprehensive technology stack specification for the AssetCore asset management platform
alwaysApply: true
---

# AssetCore Technology Stack

AssetCore leverages a modern, full-stack JavaScript ecosystem designed for scalability, maintainability, and developer productivity. Our technology choices prioritize performance, security, and rapid development capabilities.

## 1. Frontend Stack

### 1.1 Core Framework
- **Next.js 15.x** - Full-stack React framework with SSR/SSG capabilities
- **React 18.x** - Component library with concurrent features
- **TypeScript 5.x** - Type-safe development across the entire stack

### 1.2 UI & Styling
- **Tailwind CSS 3.x** - Utility-first CSS framework for rapid styling
- **Shadcn/ui** - Accessible, customizable component library
- **Lucide React** - Consistent icon system

### 1.3 State Management & Data Flow
- **Zustand 4.x** - Lightweight client-side state management
- **TanStack Query 5.x** - Server state management with caching
- **React Hook Form 7.x** - Performant form handling
- **Zod 3.x** - TypeScript-first schema validation

### 1.4 Utilities & Visualization
- **Recharts 2.x** - Responsive data visualization
- **date-fns 3.x** - Immutable date manipulation
- **Axios 1.x** - HTTP client with interceptors
- **React Hot Toast** - Lightweight notification system

## 2. Backend Stack

### 2.1 Runtime & Framework
- **Node.js 20.x LTS** - JavaScript runtime with long-term support
- **Next.js API Routes** - Serverless API endpoints
- **TypeScript 5.x** - Type-safe backend development

### 2.2 Database & Data Layer
- **MySQL 8.x** - ACID-compliant relational database
- **mysql2 3.x** - Promise-based MySQL client with prepared statements

### 2.3 Authentication & Security
- **Custom Auth System** - Email/password authentication
- **bcryptjs** - Password hashing with salt rounds
- **jsonwebtoken** - JWT token management
- **express-rate-limit** - API rate limiting and DDoS protection
- **@next/cors** - Cross-origin request handling

### 2.4 File Management
- **multer 1.x** - Multipart file upload handling
- **Custom Storage Wrapper** - Abstraction for multiple cloud providers (AWS S3, Google Cloud, Azure)
- **sharp** - High-performance image processing
- **file-type** - MIME type detection and validation

## 3. Development Environment

### 3.1 Package Management & Configuration
- **yarn** - Fast, reliable dependency management
- **dotenv** - Environment variable configuration
- **VS Code** - Primary development environment

### 3.2 Database & API Tools
- **DBeaver** - Database management and query execution
- **Postman** - API testing and documentation

### 3.3 Testing Framework
- **Jest** - Unit testing with mocking and coverage
- **Playwright** - Cross-browser end-to-end testing
- **Supertest** - HTTP integration testing
- **Testcontainers** - Isolated database testing

## 4. Architecture Principles

### 4.1 Full-Stack TypeScript
- Consistent type safety from frontend to database
- Shared type definitions across layers
- Compile-time error detection

### 4.2 Performance Optimization
- Server-side rendering for SEO and initial load speed
- Static generation for content-heavy pages
- Efficient caching strategies with TanStack Query
- Image optimization with Sharp

### 4.3 Security-First Design
- Multi-layer authentication and authorization
- Input validation and sanitization
- Rate limiting and abuse prevention
- Secure file upload and storage

### 4.4 Developer Experience
- Hot reloading and fast refresh
- Comprehensive TypeScript support
- Automated testing and quality checks
- Clear separation of concerns

## 5. Database Architecture

### 5.1 Database Design
- **Primary Database**: MySQL 8.x with InnoDB storage engine
- **Connection Pooling**: Built-in connection pooling with mysql2 driver
- **Schema Design**: Normalized relational design with foreign key constraints
- **Data Types**: Optimized column types for performance and storage efficiency

### 5.2 Performance Optimizations
- **Indexing Strategy**: Composite indexes for common query patterns
- **Query Optimization**: Prepared statements and query caching
- **Partitioning**: Table partitioning for large datasets
- **Connection Management**: Efficient connection pooling and timeout handling

### 5.3 Data Integrity & Security
- **ACID Compliance**: Full transaction support with rollback capabilities
- **Data Validation**: Database-level constraints and triggers
- **Backup Strategy**: Automated daily backups with point-in-time recovery
- **Encryption**: Data encryption at rest and in transit
